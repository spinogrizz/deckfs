name: Build and Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.1.1, v1.0.0, etc.

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for trusted publishing to PyPI
      contents: write  # Required to create GitHub releases
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Extract version from tag
      id: get_version
      run: |
        # Remove 'v' prefix from tag to get version number
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Update version in pyproject.toml
      run: |
        sed -i "s/^version = .*/version = \"${{ steps.get_version.outputs.version }}\"/" pyproject.toml
        echo "Updated pyproject.toml version:"
        grep "^version" pyproject.toml
    
    - name: Build package
      run: |
        python -m build
        echo "Built packages:"
        ls -la dist/
    
    - name: Verify package contents
      run: |
        echo "=== Wheel contents ==="
        python -m zipfile -l dist/*.whl
        echo ""
        echo "=== Package metadata ==="
        python -m twine check dist/*
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Using trusted publishing - no API tokens needed
        # Just needs to be configured on PyPI for this repository
        verbose: true
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.whl
          dist/*.tar.gz
        body: |
          Release ${{ steps.get_version.outputs.version }}
          
          ## Changes
          See commit history for detailed changes.
          
          ## Installation
          ```bash
          pip install deckfs==${{ steps.get_version.outputs.version }}
          ```
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}